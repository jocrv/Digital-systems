the Karnaugh Map, a graphical simplification method created by Edward Veitch and perfected by telecommunications engineer Maurice Karnaugh.

We will see the theoretical basis that makes the abacus viable, capable of, from Truth Tables, constructing minimal canonical expressions.

We will also learn how to apply the abacus in situations with two or three logical variables.

Goals
Compare traditional versus agile methodologies;
Identify tools for software development.
In previous classes we saw processes that allow the definition and tabular or algebraic representation of logical functions.

We know Boolean Algebra, which allows us to minimize logical expressions.

Minimum canonical logic expressions provide combinational circuits with a minimum number of gates, which optimizes the operation, energy consumption, construction cost and performance of the designed artifact.

The Karnaugh Map is an abacus that allows the application of the axioms, properties and theorems of Boolean Algebra, automatically. The idea is to construct a diagram so that each unit distant term is adjacent and then apply operations that translate into algebraic manipulations. For a good understanding of the process, we need to define what unitary distant terms are.

Two terms are unit distant if:
They are composed of the same variables.

two
There is a single logically negated variable between these terms.


Simplifying the notation a little, we will represent the term by a binary number. The negated variable associated with the digit 0 and not negated with the digit 1. Thus, for example, the term 𝐴𝐵 ̅𝐶𝐷 is represented by the sequence 1011 and the term 𝐴𝐵𝐶𝐷 ̅ by the sequence 1110.

Attention
An n-bit binary number (a bit is a binary digit) has n unit distant binary numbers. For example: The binary number 0 has a single distant number, the number 1; the number 00 has two unitary distant numbers 01 and 10; the number 000 has three distant unitary numbers 001, 010 and 100, and so on.

Karnaugh realized that it is possible to construct diagrams in which all adjacent numbers (horizontally or vertically) are units apart. Let's look at these diagrams.



In diagram 1, it can be seen that 0 is adjacent to 1 and these numbers are unitary apart.


Diagram 2 is constructed by vertically mirroring diagram 1; thus, diagram 2 has two lines, in which, in the first line, the digit 0 is added to the left of each bit and, in the second line, the digit 1 is added, obtaining diagram 2 as written.

In diagram 2, it is observed that 00 is one unit away from 01 (horizontal) and 10 (vertical); 01 is unity distant from 00 (horizontal) and 11 (vertical); 10 is unity distant from 00 (vertical) and 11 (horizontal); and finally, 11 is unity distant from 10 (horizontal) and 01 (vertical).


Diagram 3 is diagram 2 mirrored to the right (Figure 1). To the left of the mirror, binaries receive the leading digit 0; to the right of the mirror, binaries receive the digit 1 to the left, resulting in diagram 3.

We have already seen that each three-bit binary has three unit distant numbers. If we analyze binary 011 in diagram 3, we will see that: 010 and 111 are horizontally adjacent and 001 is vertically adjacent. However, which ones are adjacent to 000, for example? We know there are three, but in the diagram there are only two: 001 (horizontal) and 010 (vertical). Where is the third one? We know that it exists and we know how to calculate it: just deny one of the 000 bits. So we have 100, 010 (vertical), 001 (horizontal). Where is 100 on the diagram? Analyzing, we see that 100 is at the other end of the line. Thus, we conclude that the ends of the diagram are adjacent.


Diagram 4 is constructed in a similar way to diagram 3, simply mirroring it vertically, as shown in figure 2.



The construction process is analogous to the 3-bit diagram (figure 1). In yellow, the unitary distant binaries at 0110 are highlighted: 0010, 0100 (horizontal) and 0111, 1110 (vertical).

Once the construction of the diagram is understood, we will see how the abacus can simplify logical expressions. Let's analyze two unitary distant elements in the 4-bit diagram: Let them be 0010 and 0110. These two binaries translate into the terms: A B C D and A B C D.

.
Suppose these terms have truth value TRUE in a truth table that represents a hypothetical logical function. Thus, the logical expression that represents the function will contain them, being: 𝐹=… A B C D + A B C D.
𝐹
=
…
 
  In this expression, we can apply the distributive property of the AND operator over the OR, obtaining: 𝐹=… A C D (B+ B)= A B C.
𝐹
=

When observing the binaries associated with the expressions 0010 and 0110, we realize that the association is 0010 with the term A B C D

and 0110 to the term A B C D
 

 
. Observing the terms, we see that the only variable that has a negated logical value among them is B, and it is the simplified one in algebraic manipulation. This is no coincidence and is the reason the abacus works.

Two-Variable Karnaugh Map
As we have already seen, with two variables, each possible term in the truth table is associated with a binary. Table 1 shows how this association is made.

 Table 1 – Association between the Truth Table and the Logical Expression Terms

We have already seen how to translate the truth table into the logical expression, but if, for example, we had table 2, the translation would be: A B + A B.
 
 

 Table 2 – Example of Logic Function

Note that rows 2 and 3 of the table have truth value true and correspond to the terms: A B, A B;
 
 
respectively. The binaries associated with these terms are 01 and 00, respectively.

Let's look at the assembly of the abacus:

Map 1 – Two-variable Karnaugh map.

Map 2 – Karnaugh map relative to table 2.

Map 1 is constructed as follows: Columns A0 are the terms in which the logical variable A is negated and A1 are the terms in which the logical variable A has its truth value preserved. The analogous happens with lines B0 and B1. Thus, for the example truth table (table 2) the map would be assembled as follows (map 2).
Attention
In the Karnaugh Map it is usual to use 0 and 1 in place of true and false. This is a convention. It is adopted to improve the readability of the map. However, do not confuse true with 1 or false with 0, as we have already discussed when talking about logic gates.

The Karnaugh Map manipulation algorithm is to group true terms, 1 in the map, into groups of size 2k, in the largest possible size. In other words, in the 2-variable map, we must look for clusters of size 4, 2 or 1.

See the Map Reading document and learn about grouping readings.
Three-Variable Karnaugh Maps
The abacus for three variables is similar to that for two. Therefore, the first step is assembly. Let's remember that the assembly of the Karnaugh Map is the construction of the diagram of unitary distant terms of three variables (diagram 3). We will use truth table 4 as an example, from an example logical function.

 Truth table 4 – Truth table example

It should be noted that the Associated Binary column is illustrative and is not part of the logical function mapped in the truth table. The three-variable Karnaugh Map is derived from diagram 3 and is assembled as follows (map 15):

 Map 15 – Karnaugh Map of three variables.

In map 15, each of the positions equivalent to the binaries in table 4 are equivalent to a term of a logical expression. For example, the line associated with binary 110 is equivalent to the term 𝐴𝐵𝐶 ̅. We have already seen this in the two-variable map, it is analogous. Therefore, truth table 4 is translated into the Karnaugh Map 16.

 Map 16 – Karnaugh map of three variables.

Map reading
In the three-variable map, the clusters can be eight, four, two or one
1. There is only one possibility of grouping eight 1s, which
corresponds to a tautology (logical function always true). Map 17 shows
this reading.
00 01 11 10
0 1 1 1 1
1 1 1 1 1
Map 17 – Grouping of eight 1s.
Map 17 should be read as 𝐹 = 𝑉, a tautology.
Grouping reading of four 1s
There are two possible groupings of four 1s. The first is the map
18.
00 01 11 10
0 0 1 1 0
1 0 1 1 0
Map 18 – Grouping of four 1s.
The reading is analogous to what we saw in the two-variable map. The variable that is read is
one that maintains the logical value for all binaries of the positions of the 1s in the
map. In our example: A0B1C0, A0B1C1, A1B1C0, A1B1C1. Therefore, reading this
grouping of four 1s is the 𝐵 term.
A
B
W
A
B
W
Let's look at this through algebraic manipulation. The grouping corresponds to the expression:
𝐴̅𝐵𝐶̅+ 𝐴̅𝐵𝐶 + 𝐴𝐵𝐶̅+ 𝐴𝐵𝐶 = 𝐴̅𝐵(𝐶̅+ 𝐶) + 𝐴𝐵(𝐶̅+ 𝐶) = 𝐴̅ 𝐵 + 𝐴𝐵 = 𝐵(𝐴̅+ 𝐴) = 𝐵.
There is another way to group four 1s, that of map 19.
00 01 11 10
0 0 0 0 0
1 1 1 1 1
Map 19 – Grouping of four 1s.
In map 19, each of the 1s corresponds to the terms: A0B0C1, A0B1C1, A1B1C1 and
A1B0C1. Once again the variable that maintains the constant logical value of all
terms is C1. Thus, the cluster reading is the term 𝐶.
The algebraic manipulation is: 𝐴̅𝐵̅𝐶 + 𝐴̅𝐵𝐶 + 𝐴𝐵𝐶 + 𝐴𝐵̅𝐶 = 𝐴̅𝐶 (𝐵̅ + 𝐵) + 𝐴𝐶 (𝐵 + 𝐵̅) =
𝐴̅𝐶 + 𝐴𝐶 = 𝐶(𝐴̅+ 𝐴) = 𝐶.
There is another grouping equivalent to the first, which is non-obvious. Let's see the
map 20.
00 01 11 10
0 1 0 0 1
1 1 0 0 1
Map 20 – Grouping of four 1s.
This grouping is analogous to the grouping in map 18. Let us remember that the term
000 is one unit away from 100, and the term 001 is one unit away from 101. Let's look at the
reading of this grouping: A0B0C0, A0B0C1, A1B0C0 and A1B0C1. The variable that
maintains the logical value in the four terms is B0, therefore, the reading of this grouping is
𝐵̅.
A
B
W
A
B
W
Reading two 1s
Reading two 1s is analogous to what we have already seen in the two-variable map. They exist
two possibilities: Grouping is horizontal or vertical. Remember, never
diagonally! Map 21 shows an example with both cases.

00 01 11 10
0 0 0 1 0
1 1 1 1 0
Map 21 – Grouping of two 1s.
Let's look first at the horizontal grouping, the reading is: A0B0C1 and A0B1C1. A0C1 if
maintains both terms, giving the reading: 𝐴̅𝐶. In vertical grouping, the
reading is: A1B1C0 and A1B1C1. A1B1 without maintains both terms, providing the
reading 𝐴𝐵.
Reading isolated 1s
Reading isolated 1s is simple. Each 1 has direct reading. For example, on the map
22, the isolated 1s read: 𝐴̅𝐵̅𝐶 and another 𝐴𝐵𝐶.
00 01 11 10
0 0 0 0 0
1 1 0 1 0
Map 22 – Group of isolated 1s.
The 1-clustering algorithm is similar to the two-variable map,
being described as follows:
Step 1: Try grouping eight 1s; if all 1s are
grouped, stop;
• Step 2: Try grouping four 1s; if all 1s are
grouped, stop; otherwise, try step 2 once again;
• Step 3: If step 2 is not possible: Try grouping two 1s;
if all 1s are grouped, stop; otherwise try step 3
once again;
• Step 4: If step 3 is not possible: Try grouping a single
1; if all 1s are grouped, stop; otherwise try step 4
once again.
The last step of the abacus is reading, each grouping is a term of a
conjunction, thus ending the abacus.
EXAMPLE
Determine the minimum canonical logical expression of the logical function of the Truth Table a
follow.
A B C F
F F F F
F F V V
F V F V
F V V V
V F F F
V F V V
V V F V
V V V V
First step: Translation on the map
00 01 11 10
0 0 1 1 0
1 1 1 1 1
Note that the only false terms in table 4 correspond to A0B0C0 and A1B0C0,
Therefore, the map is assembled this way.
Applying the algorithm, we see that it is not possible to group eight 1s, as they cannot
exist on the map. But we can group four together, resulting in:
00 01 11 10
0 0 1 1 0
1 1 1 1 1
There are still ungrouped 1s and looking at the map we see that it is possible
group four more 1s, resulting in:
00 01 11 10
0 0 1 1 0
1 1 1 1 1
After this grouping, there are no more ungrouped 1s, so the algorithm
grouping is over.
Second step: reading
The group of four horizontal 1s is composed of: A0B0C1, A0B1C1,
A1B1C1 and A1B0C1. The variable that remains in the four terms is C1, resulting in
reading 𝐶.
The other grouping is composed of the terms: A0B1C0, A1B1C0, A0B1C1 and
A1B1C1. The variable that remains in the four terms is B1, resulting in the reading 𝐵. Thus, the map reading is the conjunction of the terms read, resulting in: 𝐹 = 𝐵 +
𝐶.

We will study the Karnaugh Map, a graphical simplification method created by Edward Veitch and perfected by telecommunications engineer Maurice Karnaugh.

We will see the theoretical basis that makes the abacus viable, capable of, from Truth Tables, constructing minimal canonical expressions.

We will also learn how to apply the abacus in situations with four logical variables.

Goals
Assemble four-variable Karnaugh Maps;
Apply the Karnaugh map to obtain minimal canonical logical expressions from four-variable tables;
Explain the concept of Don’t care and special situations in Karnaugh Maps.
We saw how to apply the Karnaugh Map abacus to find the minimum canonical form for logical functions of two and three variables.

 
In this class, we will see how to apply the abacus to find the minimum canonical form in functions of four variables.

We already know that the Karnaugh Map derives from the diagram, discovered by Karnaugh, that shows all unitary distant binaries of, in this specific case, four bits (diagram 1).

 Diagram 1 – 4-bit unitary far binaries. Source: Prepared by the author, 2020.

Let's remember that each binary is associated with a term in the truth table of the logical function for which we want to find the minimum canonical expression. For example: Binary 1001 represents the term: ABCD
�
�
�
�
. That said, let's look at the map assembly:

 Map 1 – Four-variable Karnaugh map. Source: Prepared by the author, 2020.

To illustrate how to assemble the map, we will use truth table 1 as an example, with four variables.

 Truth table 1 – Logical function of four variables. Source: Prepared by the author, 2020.

The translation of the truth table into the Karnaugh Map is similar to what we saw in the 2- and 3-variable maps, the truth value of each term in the table is placed in the binary associated with the term. For example: The term 𝐴𝐵 ̅𝐶𝐷 is associated with the binary 1011.
.

 Map 2 – Four-variable Karnaugh map. Source: Prepared by the author, 2020.

Comment
Let us remember that, in the Karnaugh Map, 0 is FALSE and 1 is TRUE, as was said in the previous class, this is a convention. Let's not get confused with logic levels 0 and 1, which are differences in electrical potential that activate the logic gate circuits.

Map Reading
The process of reading the four-variable Karnaugh Map is similar to the three- and two-variable ones. As we saw in the previous class, a Karnaugh Map of k variables admits groupings of 2k, 2k-1, ..., 20 1s.

Grouping of sixteen 1s
The grouping of sixteen 1s is analogous to the grouping of eight 1s in the three-variable map and four 1s in the two-variable map.

As we have seen, the 2k 1 grouping only occurs when the logical function is a tautology, that is, the function's truth table has all rows with a truth value of TRUE.

Grouping of eight 1s
In the example map (map 2) we have the possibility of grouping eight 1s. The grouping of eight 1s occurs in the example map as highlighted in map 3.

 Map 3 – Grouping of eight variables in horizontal mode. Source: Prepared by the author, 2020.

Let's read the grouping of map 3:
ABCD+ABCD+ABCD+ABCD+ABCD+ABCD+ABCD+ABCD=D(ABC+ABC+ABC+ABC+ABC+ABC+ABC+ABC) = D(AB(C+C)+AB(C+C)+AB(C+C)+AB(C+C))=D(AB+AB+AB+AB) = D(A(B+B)+A(B+B))=D(A+A)=D
Also as we saw in the last class, the Karnaugh Map aims to not perform algebraic manipulation. The reading is done by finding the variable that does not have its logical value changed in all 1s of the grouping. In this grouping we have: A0B0C0D1, A0B0C1D1, A0B1C0D1, A0B1C1D1, A1B1C0D1, A1B1C1D1, A1B0C0D1, A1B0C1D1: Note that D does not have the logical value negated in all 1s in the grouping. As expected, the group reading is D.

In the example itself there is another grouping of eight 1s. Let us remember that the ends of the map are unitary apart, so the grouping of map 4 is a grouping of eight 1s.

 Map 4 – Grouping of eight variables in horizontal mode. Source: Prepared by the author, 2020.

Reading is done in the same way, the terms for each 1 in the grouping are: A0B0C0D0, A0B0C0D1, A0B0C1D1, A1B0C0D0, A1B0C0D0, A1B0C0D1, A1B0C1D1, A1B0C1D0. Highlighted, we have variable B with the logical value negated; thus, the cluster reading is B
�
.

Grouping of four 1s
In the example, we have a grouping of four 1s. Map 5 highlights this grouping.

 Map 5 – Grouping of four 1s square mode. Source: Prepared by the author, 2020.

The reading is done in a similar way, simply highlighting the terms corresponding to each 1 in the group: A1B1C1D1, A1B1C1D0, A1B0C1D1, A1B0C1D0. It is observed that variables A and B are present in all terms with the same truth value, thus, the reading is 𝐴𝐶.

The grouping of four 1s can be linear, as we can see in map 6.

 Map 6 – Grouping of four 1s linear mode. Source: Prepared by the author, 2020.

The reading is A0B0 C1D1 , A0B1 C1D1 , A1B1 C1D1 , A1B0 C1D1 , resulting in the term: 𝐶𝐷

 
On the same map 6, there is another group of four 1s, open to the sides. For teaching purposes, map 5 will be transcribed into map 7.

 Map 7 – Grouping of four 1s open mode to the sides. Source: Prepared by the author, 2020.

Highlighting the terms, A0B0C1D1, A0B0C1D0, A1B0C1D1, A1B0C1D0, we have the reading: BC
�
�
.

There is a fourth grouping of four 1s: Those at the edge of the map, transcribed in map 8.
.

 Map 8 – Grouping of four 1s at the ends. Source: Prepared by the author, 2020.

This grouping is valid since the binaries at the ends of the rows and columns are unitary apart.

The reading of map 8 is: A0B0C0D0, A0B0C1D0, A1B0C0D0, A1B0C1D0, resulting in the term: BD
�
�
.

Grouping of two 1s
The grouping of two 1s is very similar to what we saw in the maps with two and three variables, and can be: Vertical, horizontal and open at the ends, as in the map with three variables. Let's look at an example with the three possibilities in map 9.

 Map 9 – Grouping of two 1s. Source: Prepared by the author, 2020.

In map 8, grouping A is horizontal, the terms corresponding to the 1s are A0B0C1D1 and A0B1C1D1, resulting in the reading: ACD
�
�
�
. Grouping B is vertical, the terms corresponding to the 1s are: A0B1C0D1 and A0B1C1D1, resulting in the reading ABD
�
�
�
. Finally, grouping C is open at the ends and results in the terms: A1B0C0D0 and A1B0C1D0, reading: ABD
�
�
�
.

Grouping of 1 isolate
The last type of grouping is that of isolated 1, which is read directly. Map 10 shows an example.

 Map 10 – Group of 1 isolated. Source: Prepared by the author, 2020.

The reading of the term is A0B0C0D0, resulting in the term: ABCD
�
�
�
�
.

The 1-clustering algorithm is similar to the three-variable map and is described as:
:


The last step of the abacus is reading. Each grouping is a term of a conjunction, thus ending the abacus.

As an example, let's perform the complete abacus on the logical function represented by truth table 1, which results in map 1, transcribed below for teaching purposes (map 11):

 Map 11 – Example map. Source: Prepared by the author, 2020.

Reading:
Group A: B
�
;
Group B: D
�
;
Group C: AC
�
�
;
resulting in the logical function F=B +D +AC
�
=
�
 
+
�
 
+
�
�
.


The term X – not relevant or Don’t care
In some situations, some entries in the truth table of a Logical Function may not make practical sense. This occurs when the combination of logical input values does not make sense in the semantics of the problem being solved by the logical function.

When this occurs, we insert the value X into the truth table of the logical function instead of 0 or 1. This occurs so that, when grouping, we use X in the most convenient way possible. That is, if it is advantageous, we consider X as 1; otherwise, we consider X as 0.

Example
Let's imagine a 6-story building: One ground floor (0), three commercial buildings (1, 2 and 3) and the last two (4 and 5) residential. For safety reasons, the elevator can be configured to answer calls for residential or commercial use only. The circuit that decides whether the call will be accepted receives four logical signals: The R signal which, if true, indicates that the elevator will only serve residences and, otherwise, commercial floors; and A, B, C is a three-bit binary number indicating the calling floor. The output of the logical function F is V, if the call is accepted, and 0, otherwise.
EXAMPLE 1
Let's imagine a 6-story building: One ground floor (0), three commercial buildings (1, 2 and 3) and the
last two (4 and 5) residential. For safety reasons, the elevator can be
configured to answer calls for residential or commercial use only. O
circuit that decides whether the call will be accepted receives four logical signals: The R signal
which, if true, indicates that the elevator will only serve residences and, if
otherwise, the commercial floors; and A, B, C is a three-bit binary number indicating
the calling floor. The output of the logical function F is V, if the call is accepted, and 0,
otherwise.
Assembling the truth table, we have:
Table 2 – Logical Function Example
A B C R F
F F F F V Ground floor, serviced by use
F F F V V commercial or residential.
F F V F V 1st floor, commercial
F F V V F
F V F F V 2nd floor, commercial
F V F V F
F V V F V 3rd floor, commercial
F V V V F
V F F F F 4th floor, residential
V F F V V
V F V F F 5th floor, residential
V F V V V
V V F F
V V F V X binaries 110 and 111 (6 and 7)
V V V F
two
V V V V X do not exist, therefore, the
function F is irrelevant.
Source: Prepared by the author, 2020.
Transcribing the table, we have map 12:
00 01 11 10
00 1 1 X 0
01 1 0 X 1
11 0 0 X 1
10 1 1 X 0
Map 12 – Transcription of table 2.
Source: Prepared by the author, 2020.
Resulting in the reading: 𝐹 = 𝐴̅𝐵̅𝐶̅+ 𝐴̅𝑅̅ + 𝐴R
The example shows the practical use of Don’t care, X on the map. Note that for floors that do not exist in the building, we use X in the function and group it according to convenience. In map 12, we use the X values as 1s, to minimize the logical expression of the function.

The last observation about Karnaugh Maps is that the result needs to be criticized before it is accepted. The algorithm shown may result in non-optimal readings. Let's look at an example. Let the following map be (map 13):a


 Map 13 – Pathological case. Source: Prepared by the author, 2020.

By the algorithm, we must group the four central 1s first, resulting in map 14.

 Map 14 – Pathological case grouping of four 1s. Source: Prepared by the author, 2020.

Then, group the 1s not yet grouped into pairs, resulting in Map 15.

 Map 15 – Pathological case grouping of double 1s. Source: Prepared by the author, 2020.

According to the algorithm presented, all 1s are grouped and we can read the minimal canonical form, resulting in the function F=BD + ABC + ACD + ABC + ACD
�
=
�
�
 
+
 
�
�
�
 
+
 
�
�
�
 
+
 
�
�
�
 
+
 
�
�
�
, which, as we have seen, is minimal due to the application of the abacus. But is this actually true?

 
Let's manipulate it algebraically:
F=BD(A+A) (C+C)+ ABC + ACD + ABC + ACDF=(ABD+ABD) (C+C)+ ABC + ACD + ABC + ACDF=ABCD+ABCD+ABCD+ABCD+ ABC + ACD + ABC + ACDF=ACD(1+B)+ABC(1+D)+ABC(1+D)+ACD(1+B)F=ACD+ABC+ABC+ACD
Note that the manipulation resulted in the same terms as F=BD+ABC + ACD + ABC + ACD
�
=
�
�
+
�
�
�
 
+
 
�
�
�
 
+
 
�
�
�
 
+
 
�
�
�
, except the term BD
�
�
. In other words, the map did not result in the minimum canonical form. Let's analyze why.

Note that the first step of the abacus is to group the four central elements, which result in the term 𝐵𝐷. Next, we group the pairs. This is the application of the abacus! Is this correct? Yes, we saw that. So where is the error? There is no error, but we must analyze the results of the groupings to see if there are redundancies and whether we should eliminate them.

Note that, after grouping the pairs of 1s, the grouping of the four central 1s becomes redundant since all the 1s in this grouping are grouped in pairs. Thus, the grouping of four 1s can be excluded. This results in the already known map 15, whose reading is: F=ACD +ABC+ABC+ACD
�
=
�
�
�
 
+
�
�
�
+
�
�
�
+
�
�
�
.

 Map 15 – Pathological case grouping of double 1s. Source: Prepared by the author, 2020.
